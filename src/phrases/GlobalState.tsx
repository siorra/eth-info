import React from 'react';
// import { theme } from 'ui/theme';

type Props = {
};
type State = {
};


import jss from 'jss';
import preset from 'jss-preset-default';
jss.setup(preset());


class GlobalState extends React.PureComponent<Props, State> {
  getStyle() {
    const style = {
      maxWidth: '800px',
      '& > p': {
        borderBottom: '1px solid rgba(0,0,0,.3)',
        fontSize: '16px',
        lineHeight: '26px',
        margin: '0',
        paddingBottom: '10px',
        paddingTop: '10px',
      },
      '& li': {
        fontSize: '16px',
        lineHeight: '26px',
      }
    };
    return {
      style,
    };
  }
  render() {
    const sheet = jss.createStyleSheet(this.getStyle()).attach();
    const { classes } = sheet;

    return (
      <div className={classes.style}>
        <h3>Глобальное состояние сети или patricia-дерево Меркла</h3>
        <p>Данные нижней части дерева генерируются следующим образом: данные, которые мы хотим сохранить, делятся на блоки, затем блоки делятся на сегменты, после чего берётся хэш каждого сегмента и весь процесс повторяется до тех пор, пока не останется только корневой хэш.</p>
        <img src="https://ethclassic.files.wordpress.com/2017/11/1-txlzvc6bh565uylzc3q6vw.png?w=700" alt="" />

        <p>В случае с Эфириумом, ключ/значение для дерева состояний отображается между адресами и ассоциированными с ними счетами, включая balance, nonce, codeHash и storageRoot для каждого счёта (где storageRoot сам также является деревом).</p>
        <img src="https://ethclassic.files.wordpress.com/2017/11/1-n8ytacaqdthtzuazajgujq.png?w=700" alt="" />

        <p>Та же самая trie-структура используется для хранения транзакций и квитанций (они же чеки, англ. receipt). Точнее говоря, каждый блок имеет «заголовок», в котором хранится хэш корневых узлов трёх различных trie-структур, включая:
        </p>
        <ol>
          <li>trie-дерево состояний;</li>
          <li>trie-дерево транзакций;</li>
          <li>trie-дерево квитанций.</li>
        </ol>
        <img src="https://ethclassic.files.wordpress.com/2017/11/1-4eqfjxd2-dbivgvv-8si8g1.png" alt="" />

        <h3>«Лёгкие клиенты» или «лёгкие ноды»</h3>
        <p><b>Полные архивные ноды синхронизируют блокчейн, загружая всю цепочку, от генезисного блока до текущего верхнего блока, включая все записанные в цепочке транзакции. </b>
        Как правило, полные архивные ноды держат майнеры, так как они необходимы для майнинга</p>
        <p><b>Вместо того чтобы загружать и локально хранить полную цепочку, включая записи обо всех произведённых транзакциях, лёгкие ноды загружают только цепочку заголовков блоков, от генезисного до текущего верхнего блока, без подробной информации о транзакциях или получения какого-либо ассоциированного с ними состояния.</b></p>

        <p>Причина, по которой это работает, заключается в том, что хэши в дереве Меркла распространяются вверх – если злоумышленник пытается подменить или вписать поддельную транзакцию в нижнюю часть дерева Меркла, это действие повлечёт за собой изменение хэша узла уровнем выше, что, в свою очередь, приведёт к изменению хэша узла над ним и так далее до тех пор, пока, в конце концов, это не изменит корень дерева.</p>
        <img src="https://ethclassic.files.wordpress.com/2017/11/1-mwntta5q-eoax8jcqejp5g.png?w=700" alt="" />
        <p>Доказательство Меркла состоит из:</p>
        <ol>
          <li>фрагмента данных для проверки;</li>
          <li>корневого хэша дерева;</li>
          <li>«ветви» (всех хэшей на пути от проверяемого фрагмента данных к корню дерева).</li>
        </ol>
        <img src="https://ethclassic.files.wordpress.com/2017/11/1-45v7er4llbcz4g8e12qd9w.png?w=700" alt="" />

        <p><b>Подводя итог, преимущество использования patricia-дерева Меркла заключается в том, что корневой узел этой структуры криптографически зависит от хранящихся в дереве данных, и поэтому хэш корневого узла может использоваться в качестве идентификатора безопасности этих данных. Поскольку заголовок блока включает в себя корневой хэш деревьев состояния, транзакций и квитанций, любая нода может проверить и подтвердить небольшую часть состояния Эфириума без необходимости хранить всё состояние, размер которого потенциально неограничен.</b></p>
      </div>
    );
  }
}
export default GlobalState;
